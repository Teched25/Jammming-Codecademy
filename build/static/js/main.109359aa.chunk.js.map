{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","registerServiceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","handleKeyPress","onSearch","event","setState","target","value","key","react_default","a","createElement","className","placeholder","onChange","onKeyPress","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","e","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","items","artists","uri","cover","images","url","preview","preview_url","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","current","_this2","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","Components_App_App","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.109359aa.chunk.js","sourcesContent":["const clientId = '8ad5b9b4f134483786f6df6f13241472';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n\r\n    // Gets access token from Spotify\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n        const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n        if (hasAccessToken && hasExpiresIn) {\r\n            accessToken = hasAccessToken[1];\r\n            const expiresIn = Number(hasExpiresIn[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    // Uses access token to return a response from the Spoitify API using user serach term from SearchBar\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(\r\n            response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    console.log('API request failed');\r\n                }\r\n        }).then(\r\n            jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri,\r\n                cover: track.album.images[2].url,\r\n                preview: track.preview_url\r\n            }));\r\n        });\r\n    },\r\n\r\n    // Gets a user's ID from Spotify, creates a new playlist on user's account, and adds tracks to that playlist\r\n    savePlaylist(playlistName, trackURIs) {\r\n        if (!playlistName || !trackURIs.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {\r\n            Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userId;\r\n\r\n        // Return user's ID from Spotify API\r\n        return fetch('https://api.spotify.com/v1/me', {\r\n            headers: headers\r\n        }).then(\r\n            response => {\r\n                if(response.ok) {\r\n                    return response.json();\r\n                }\r\n        }).then(\r\n            jsonResponse => {\r\n                userId = jsonResponse.id;\r\n\r\n                // Adds playlist to user's account\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({name: playlistName})\r\n                }).then(\r\n                    response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    } else {\r\n                        console.log('API request failed');\r\n                    }\r\n                }).then(\r\n                    jsonResponse => {\r\n                        const playlistId = jsonResponse.id;\r\n\r\n                        // Adds tracks to new playlist\r\n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ uris: trackURIs})\r\n                        });\r\n                    });\r\n            });\r\n    }\r\n}\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  // Sets the argument for the search method in App.js to the state of term\r\n  search() {\r\n    this.props.onSearch(this.state.term);\r\n  }\r\n\r\n  // Sets the state of term to the value the user enters in the input\r\n  // handleTermChange method\r\n  handleTermChange(event) {\r\n    this.setState({ term: event.target.value });\r\n  }\r\n\r\n  handleKeyPress(event) {\r\n    if(event.key === 'Enter') {\r\n      this.search();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"SearchBar\">\r\n        <input  placeholder=\"Enter A Song, Album, or Artist\"\r\n                onChange={this.handleTermChange}\r\n                onKeyPress={this.handleKeyPress} />\r\n        <a  onClick={this.search}>SEARCH</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","//Import React\r\nimport React from 'react';\r\n\r\n//Import stylesheet\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //Bind methods\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  //Display a + if the track is not in the playlist, display a - if the track is in the playlist\r\n  renderAction() {\r\n    if(this.props.isRemoval) {\r\n      return <a className=\"Track-action\"\r\n                onClick={this.removeTrack}>-</a>;\r\n    }\r\n    return <a className=\"Track-action\"\r\n              onClick={this.addTrack}>+</a>;\r\n  }\r\n\r\n  //Pass track to be added TrackList so it will get back to App's addTrack method\r\n  addTrack(e) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  //Pass track to be removed to TrackList so it will get back to App's removeTrack method\r\n  removeTrack(e) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n// creates a component\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track   key={track.id}\r\n                                        track={track}\r\n                                        onAdd={this.props.onAdd}\r\n                                        onRemove={this.props.onRemove}\r\n                                        isRemoval={this.props.isRemoval}\r\n                                        tracks={this.props.tracks}/>\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList  tracks={this.props.searchResults}\r\n                            onAdd={this.props.onAdd}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;\r\n","//Import React\r\nimport React from 'react';\r\n\r\n//Import necessary components\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\n//Import stylesheet\r\nimport './Playlist.css';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //Bind method\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  //Pass new playlist name to App's updatePlaylistName method\r\n  handleNameChange(e) {\r\n    this.props.onNameChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={'New Playlist'}\r\n               onChange={this.handleNameChange} />\r\n        <TrackList tracks={this.props.playlistTracks}\r\n                   onRemove={this.props.onRemove}\r\n                   isRemoval={true}/>\r\n        <a className=\"Playlist-save\"\r\n           onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport Spotify from '../../util/Spotify';\r\n\r\nclass App extends React.Component {\r\n//Creating constructor function\r\n  constructor(props) {\r\n    super(props);\r\n    //hard coded initial value\r\n    this.state = {\r\n      searchResults: [],\r\n      playlistName: 'New Playlist',\r\n      playlistTracks: []\r\n    }\r\n    // binding\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n  }\r\n\r\n  // Adds track from Search Results to Playlist\r\n  addTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks.push(track);// adds\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  // Removes track from Playlist by filtering out track id from playlistTracks\r\n  removeTrack(track) {\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(current => current.id !== track.id);//filter method\r\n    this.setState({ playlistTracks: tracks });\r\n  }\r\n\r\n  // Sends search term request to spotify and returns results of search in the search results panel\r\n  search(term) {\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({ searchResults: searchResults })\r\n    });\r\n  }\r\n\r\n  // Updates the name of the Playlist\r\n  updatePlaylistName(name) {\r\n    this.setState({ playlistName: name });\r\n  }\r\n\r\n  // Saves playlist name and tracks to user's account\r\n  //using the map method to render each track\r\n\r\n  savePlaylist() {\r\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\r\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist',\r\n        playlistTracks: []\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar onSearch={this.search}/>\r\n          <div className=\"App-playlist\">\r\n            <SearchResults searchResults={this.state.searchResults}\r\n                           onAdd={this.addTrack}/>\r\n            <Playlist playlistName={this.state.playlistName}\r\n                      playlistTracks={this.state.playlistTracks}\r\n                      onRemove={this.removeTrack}\r\n                      onNameChange={this.updatePlaylistName}\r\n                      onSave={this.savePlaylist}/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}